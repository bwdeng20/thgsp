name: Building Wheels


on: [ workflow_dispatch ]


jobs:

  wheel:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      max-parallel: 20 # max for free user
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ '3.11' ]
        torch-version: [ 2.5.0 ]  # [2.3.0, 2.4.0, 2.5.0]
        cuda-version: [ 'cu121', 'cpu' ]
        exclude:
          - torch-version: 2.5.0
            python-version: '3.8'
          - torch-version: 2.3.0
            cuda-version: 'cu124'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

#      - name: Free up disk space
#        if: ${{ runner.os == 'Linux' }}
#        run: |
#          sudo rm -rf /usr/share/dotnet

      - name: Translate cuXXY to XX.Y.Z, e.g., cu113 to 11.3.1
        id: translator
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          echo "::set-output name=full_version:: $(jq -r .${{ matrix.cuda-version }} .github/workflows/mapping.json)"

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        uses: Jimver/cuda-toolkit@master
        id: cuda-toolkit
        with:
          cuda: ${{steps.translator.outputs.full_version}}

      - name: Install PyTorch ${{ matrix.torch-version }}+${{ matrix.cuda-version }}
        run: |
          pip install numpy==2.1 scipy
          pip install torch==${{ matrix.torch-version }} --extra-index-url https://download.pytorch.org/whl/${{ matrix.cuda-version }}
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
        shell:
          bash

      - name: Install torch-scatter, sparse, and cluster
        run: |
          pip install torch-scatter torch-sparse torch-cluster  -f https://data.pyg.org/whl/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }}.html
        shell:
          bash

      - name: Install main package for CPU
        if: ${{ matrix.cuda-version == 'cpu' }}
        run: |
          python setup.py develop
        shell:
          bash

      - name: Install main package for GPU
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          python -c "import os;print(f'\033[1;35m CURRENT WORKING DIR: {os.getcwd()}\033[0m')"
          source .github/workflows/cuda/${{ matrix.cuda-version }}-${{ runner.os }}-env.sh
          python setup.py develop
        shell:
          bash

      - name: Build wheel
        run: |
          pip install wheel
          python setup.py bdist_wheel --dist-dir=dist
        shell:
          bash

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-east-1


      - name: Upload wheel
        run: |
          aws s3 sync dist s3://thgsp/whl/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers

